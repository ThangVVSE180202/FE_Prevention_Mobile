// üìÑ Appointment Detail Screen
// Display detailed information about a specific appointment

import React, { useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  Linking,
} from "react-native";
import { appointmentService, userService } from "../../services/api";
import { COLORS, SPACING, FONT_SIZES } from "../../constants";

const AppointmentDetailScreen = ({ route, navigation }) => {
  const { appointment } = route.params;
  const [loading, setLoading] = useState(false);

  const formattedSlot = appointmentService.formatTimeSlot(appointment);
  const statusInfo = appointmentService.getAppointmentStatus(
    appointment.status
  );
  const canCancel = appointment.status === "booked" && !formattedSlot.isPast;

  const handleCancelAppointment = () => {
    Alert.alert(
      "X√°c nh·∫≠n h·ªßy l·ªãch h·∫πn",
      `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy l·ªãch h·∫πn v√†o ${formattedSlot.formattedTimeRange} ng√†y ${formattedSlot.formattedDate}?`,
      [
        {
          text: "Kh√¥ng",
          style: "cancel",
        },
        {
          text: "H·ªßy l·ªãch h·∫πn",
          style: "destructive",
          onPress: cancelAppointment,
        },
      ]
    );
  };

  const cancelAppointment = async () => {
    try {
      setLoading(true);
      await appointmentService.cancelAppointmentSlot(appointment._id);
      Alert.alert("Th√†nh c√¥ng", "L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c h·ªßy", [
        {
          text: "OK",
          onPress: () => navigation.goBack(),
        },
      ]);
    } catch (error) {
      console.error("Error cancelling appointment:", error);

      let errorMessage = "Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn. Vui l√≤ng th·ª≠ l·∫°i.";

      // Handle specific error cases
      if (error.response?.status === 400) {
        const errorData = error.response.data;
        if (errorData.message?.includes("cooldown")) {
          errorMessage = `B·∫°n ƒë√£ h·ªßy l·ªãch g·∫ßn ƒë√¢y. Vui l√≤ng ch·ªù ${errorData.cooldownMinutes || 30} ph√∫t tr∆∞·ªõc khi th·ª±c hi·ªán thao t√°c ti·∫øp theo.`;
        } else if (errorData.message?.includes("strike")) {
          errorMessage = `C·∫£nh b√°o: B·∫°n ƒë√£ nh·∫≠n ${errorData.strikes || 1} c·∫£nh b√°o do h·ªßy l·ªãch. ${errorData.strikes >= 3 ? "T√†i kho·∫£n c·ªßa b·∫°n c√≥ th·ªÉ b·ªã t·∫°m kh√≥a." : ""}`;
        } else if (errorData.message?.includes("banned")) {
          const unbanDate = errorData.unbanDate
            ? new Date(errorData.unbanDate).toLocaleDateString("vi-VN")
            : "";
          errorMessage = `T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã t·∫°m kh√≥a do h·ªßy l·ªãch qu√° nhi·ªÅu l·∫ßn. ${unbanDate ? `B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng l·∫°i t·ª´ ${unbanDate}.` : ""}`;
        } else if (errorData.message?.includes("too late")) {
          errorMessage =
            "Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn v√†o th·ªùi ƒëi·ªÉm n√†y. Vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp v·ªõi chuy√™n vi√™n.";
        }
      }

      Alert.alert("L·ªói", errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleContactConsultant = () => {
    if (appointment.consultant?.email) {
      const email = appointment.consultant.email;
      const subject = `Li√™n h·ªá v·ªÅ l·ªãch h·∫πn ng√†y ${formattedSlot.formattedDate}`;
      const body = `Xin ch√†o ${appointment.consultant.name},\n\nT√¥i mu·ªën li√™n h·ªá v·ªÅ l·ªãch h·∫πn v√†o ${formattedSlot.formattedTimeRange} ng√†y ${formattedSlot.formattedDate}.\n\nC·∫£m ∆°n!`;

      const mailtoUrl = `mailto:${email}?subject=${encodeURIComponent(
        subject
      )}&body=${encodeURIComponent(body)}`;

      Linking.canOpenURL(mailtoUrl)
        .then((supported) => {
          if (supported) {
            Linking.openURL(mailtoUrl);
          } else {
            Alert.alert("L·ªói", "Kh√¥ng th·ªÉ m·ªü ·ª©ng d·ª•ng email");
          }
        })
        .catch((err) => {
          Alert.alert("L·ªói", "Kh√¥ng th·ªÉ m·ªü ·ª©ng d·ª•ng email");
        });
    }
  };

  const getAppointmentInstructions = () => {
    switch (appointment.status) {
      case "booked":
        if (formattedSlot.isToday) {
          return "L·ªãch h·∫πn c·ªßa b·∫°n l√† h√¥m nay. H√£y chu·∫©n b·ªã v√† ƒë·∫øn ƒë√∫ng gi·ªù.";
        } else if (formattedSlot.isPast) {
          return "L·ªãch h·∫πn n√†y ƒë√£ qua. N·∫øu b·∫°n ƒë√£ tham gia, k·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t s·ªõm.";
        } else {
          return "L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c nh·∫Øc nh·ªü tr∆∞·ªõc gi·ªù h·∫πn.";
        }
      case "completed":
        return "L·ªãch h·∫πn ƒë√£ ho√†n th√†nh. C·∫£m ∆°n b·∫°n ƒë√£ tham gia!";
      case "cancelled":
        return "L·ªãch h·∫πn n√†y ƒë√£ b·ªã h·ªßy.";
      default:
        return "";
    }
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Chi ti·∫øt l·ªãch h·∫πn</Text>
        <View
          style={[styles.statusBadge, { backgroundColor: statusInfo.color }]}
        >
          <Text style={styles.statusText}>{statusInfo.label}</Text>
        </View>
      </View>

      <View style={styles.appointmentCard}>
        <Text style={styles.cardTitle}>Th√¥ng tin l·ªãch h·∫πn</Text>

        <View style={styles.infoRow}>
          <Text style={styles.label}>Ng√†y:</Text>
          <Text style={styles.value}>{formattedSlot.formattedDate}</Text>
        </View>

        <View style={styles.infoRow}>
          <Text style={styles.label}>Th·ªùi gian:</Text>
          <Text style={styles.value}>{formattedSlot.formattedTimeRange}</Text>
        </View>

        <View style={styles.infoRow}>
          <Text style={styles.label}>Th·ªùi l∆∞·ª£ng:</Text>
          <Text style={styles.value}>
            {Math.round(
              (new Date(appointment.endTime) -
                new Date(appointment.startTime)) /
                (1000 * 60)
            )}{" "}
            ph√∫t
          </Text>
        </View>

        {formattedSlot.isToday && (
          <View style={styles.todayNotice}>
            <Text style={styles.todayText}>‚ö†Ô∏è L·ªãch h·∫πn h√¥m nay</Text>
          </View>
        )}
      </View>

      {appointment.consultant && (
        <View style={styles.consultantCard}>
          <Text style={styles.cardTitle}>Chuy√™n vi√™n t∆∞ v·∫•n</Text>

          <View style={styles.consultantInfo}>
            <View style={styles.avatarContainer}>
              <Text style={styles.avatarText}>
                {userService.getInitials(appointment.consultant.name)}
              </Text>
            </View>

            <View style={styles.consultantDetails}>
              <Text style={styles.consultantName}>
                {appointment.consultant.name}
              </Text>
              <Text style={styles.consultantEmail}>
                {appointment.consultant.email}
              </Text>
              <Text style={styles.consultantRole}>
                {userService.getRoleName(appointment.consultant.role)}
              </Text>
            </View>
          </View>

          <TouchableOpacity
            style={styles.contactButton}
            onPress={handleContactConsultant}
          >
            <Text style={styles.contactButtonText}>Li√™n h·ªá chuy√™n vi√™n</Text>
          </TouchableOpacity>
        </View>
      )}

      {appointment.notes && (
        <View style={styles.notesCard}>
          <Text style={styles.cardTitle}>Ghi ch√∫</Text>
          <Text style={styles.notesText}>{appointment.notes}</Text>
        </View>
      )}

      <View style={styles.instructionsCard}>
        <Text style={styles.cardTitle}>H∆∞·ªõng d·∫´n</Text>
        <Text style={styles.instructionsText}>
          {getAppointmentInstructions()}
        </Text>

        <Text style={styles.generalInstructions}>
          {"\n"}L∆∞u √Ω chung:{"\n"}‚Ä¢ ƒê·∫øn ƒë√∫ng gi·ªù h·∫πn{"\n"}‚Ä¢ Mang theo gi·∫•y t·ªù
          t√πy th√¢n{"\n"}‚Ä¢ Chu·∫©n b·ªã c√°c c√¢u h·ªèi mu·ªën th·∫£o lu·∫≠n{"\n"}‚Ä¢ Th√¥ng b√°o
          tr∆∞·ªõc n·∫øu c·∫ßn thay ƒë·ªïi l·ªãch h·∫πn
        </Text>
      </View>

      {canCancel && (
        <TouchableOpacity
          style={[styles.cancelButton, loading && styles.disabledButton]}
          onPress={handleCancelAppointment}
          disabled={loading}
        >
          <Text style={styles.cancelButtonText}>
            {loading ? "ƒêang h·ªßy..." : "H·ªßy l·ªãch h·∫πn"}
          </Text>
        </TouchableOpacity>
      )}

      <View style={styles.bottomPadding} />
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.BACKGROUND,
    padding: SPACING.MD,
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: SPACING.LG,
  },
  title: {
    fontSize: FONT_SIZES.HEADING,
    fontWeight: "bold",
    color: COLORS.TEXT_PRIMARY,
  },
  statusBadge: {
    paddingHorizontal: SPACING.SM,
    paddingVertical: SPACING.XS,
    borderRadius: 12,
  },
  statusText: {
    color: COLORS.WHITE,
    fontSize: FONT_SIZES.SM,
    fontWeight: "500",
  },
  appointmentCard: {
    backgroundColor: COLORS.WHITE,
    padding: SPACING.MD,
    borderRadius: 8,
    marginBottom: SPACING.MD,
    elevation: 2,
    shadowColor: COLORS.BLACK,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  cardTitle: {
    fontSize: FONT_SIZES.LG,
    fontWeight: "bold",
    color: COLORS.TEXT_PRIMARY,
    marginBottom: SPACING.MD,
  },
  infoRow: {
    flexDirection: "row",
    marginBottom: SPACING.SM,
  },
  label: {
    fontSize: FONT_SIZES.MD,
    color: COLORS.TEXT_SECONDARY,
    fontWeight: "500",
    width: 100,
  },
  value: {
    fontSize: FONT_SIZES.MD,
    color: COLORS.TEXT_PRIMARY,
    flex: 1,
    fontWeight: "600",
  },
  todayNotice: {
    backgroundColor: COLORS.WARNING,
    padding: SPACING.SM,
    borderRadius: 4,
    marginTop: SPACING.SM,
  },
  todayText: {
    color: COLORS.WHITE,
    fontWeight: "bold",
    textAlign: "center",
  },
  consultantCard: {
    backgroundColor: COLORS.WHITE,
    padding: SPACING.MD,
    borderRadius: 8,
    marginBottom: SPACING.MD,
    elevation: 2,
    shadowColor: COLORS.BLACK,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  consultantInfo: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: SPACING.MD,
  },
  avatarContainer: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: COLORS.PRIMARY,
    justifyContent: "center",
    alignItems: "center",
    marginRight: SPACING.MD,
  },
  avatarText: {
    color: COLORS.WHITE,
    fontSize: FONT_SIZES.LG,
    fontWeight: "bold",
  },
  consultantDetails: {
    flex: 1,
  },
  consultantName: {
    fontSize: FONT_SIZES.LG,
    fontWeight: "bold",
    color: COLORS.TEXT_PRIMARY,
    marginBottom: SPACING.XS,
  },
  consultantEmail: {
    fontSize: FONT_SIZES.SM,
    color: COLORS.TEXT_SECONDARY,
    marginBottom: SPACING.XS,
  },
  consultantRole: {
    fontSize: FONT_SIZES.SM,
    color: COLORS.PRIMARY,
    fontWeight: "500",
  },
  contactButton: {
    backgroundColor: COLORS.SECONDARY,
    paddingVertical: SPACING.SM,
    borderRadius: 4,
    alignItems: "center",
  },
  contactButtonText: {
    color: COLORS.WHITE,
    fontWeight: "bold",
  },
  notesCard: {
    backgroundColor: COLORS.WHITE,
    padding: SPACING.MD,
    borderRadius: 8,
    marginBottom: SPACING.MD,
    elevation: 2,
    shadowColor: COLORS.BLACK,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  notesText: {
    fontSize: FONT_SIZES.MD,
    color: COLORS.TEXT_PRIMARY,
    lineHeight: 20,
  },
  instructionsCard: {
    backgroundColor: COLORS.INFO,
    padding: SPACING.MD,
    borderRadius: 8,
    marginBottom: SPACING.MD,
  },
  instructionsText: {
    fontSize: FONT_SIZES.MD,
    color: COLORS.WHITE,
    fontWeight: "500",
    lineHeight: 20,
  },
  generalInstructions: {
    fontSize: FONT_SIZES.SM,
    color: COLORS.WHITE,
    lineHeight: 18,
  },
  cancelButton: {
    backgroundColor: COLORS.ERROR,
    paddingVertical: SPACING.MD,
    borderRadius: 8,
    alignItems: "center",
    marginBottom: SPACING.MD,
  },
  cancelButtonText: {
    color: COLORS.WHITE,
    fontSize: FONT_SIZES.LG,
    fontWeight: "bold",
  },
  disabledButton: {
    backgroundColor: COLORS.GRAY,
  },
  bottomPadding: {
    height: SPACING.LG,
  },
});

export default AppointmentDetailScreen;
