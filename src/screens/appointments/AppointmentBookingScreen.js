// üìù Appointment Booking Screen
// Confirm and book an appointment slot

import React, { useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Alert,
  ScrollView,
  TextInput,
} from "react-native";
import { appointmentService } from "../../services/api";
import { COLORS, SPACING, FONT_SIZES } from "../../constants";

const AppointmentBookingScreen = ({ route, navigation }) => {
  const { slot, consultantId, consultantName } = route.params;
  const [notes, setNotes] = useState("");
  const [loading, setLoading] = useState(false);

  const formattedSlot = appointmentService.formatTimeSlot(slot);

  const handleConfirmBooking = async () => {
    Alert.alert(
      "X√°c nh·∫≠n ƒë·∫∑t l·ªãch",
      `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë·∫∑t l·ªãch h·∫πn v√†o ${formattedSlot.formattedTimeRange} ng√†y ${formattedSlot.formattedDate} v·ªõi ${consultantName}?`,
      [
        {
          text: "H·ªßy",
          style: "cancel",
        },
        {
          text: "X√°c nh·∫≠n",
          onPress: bookAppointment,
        },
      ]
    );
  };

  const bookAppointment = async () => {
    try {
      setLoading(true);
      const response = await appointmentService.bookAppointmentSlot(slot._id);

      Alert.alert(
        "ƒê·∫∑t l·ªãch th√†nh c√¥ng!",
        "L·ªãch h·∫πn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o tr∆∞·ªõc gi·ªù h·∫πn.",
        [
          {
            text: "OK",
            onPress: () => {
              // Navigate to My Appointments or back to consultant list
              navigation.navigate("MyAppointments");
            },
          },
        ]
      );
    } catch (error) {
      let errorMessage = "Kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch h·∫πn. Vui l√≤ng th·ª≠ l·∫°i.";

      if (error.message.includes("409")) {
        errorMessage =
          "R·∫•t ti·∫øc, khung gi·ªù n√†y v·ª´a c√≥ ng∆∞·ªùi kh√°c ƒë·∫∑t. Vui l√≤ng ch·ªçn khung gi·ªù kh√°c.";
      }

      Alert.alert("L·ªói", errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>X√°c nh·∫≠n ƒë·∫∑t l·ªãch</Text>

      <View style={styles.appointmentCard}>
        <Text style={styles.cardTitle}>Th√¥ng tin l·ªãch h·∫πn</Text>

        <View style={styles.infoRow}>
          <Text style={styles.label}>Chuy√™n vi√™n:</Text>
          <Text style={styles.value}>{consultantName}</Text>
        </View>

        <View style={styles.infoRow}>
          <Text style={styles.label}>Ng√†y:</Text>
          <Text style={styles.value}>{formattedSlot.formattedDate}</Text>
        </View>

        <View style={styles.infoRow}>
          <Text style={styles.label}>Th·ªùi gian:</Text>
          <Text style={styles.value}>{formattedSlot.formattedTimeRange}</Text>
        </View>

        {formattedSlot.isToday && (
          <View style={styles.todayNotice}>
            <Text style={styles.todayText}>‚ö†Ô∏è L·ªãch h·∫πn h√¥m nay</Text>
          </View>
        )}
      </View>

      <View style={styles.notesCard}>
        <Text style={styles.cardTitle}>Ghi ch√∫ (t√πy ch·ªçn)</Text>
        <Text style={styles.notesDescription}>
          M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ v·∫•n ƒë·ªÅ b·∫°n mu·ªën t∆∞ v·∫•n ho·∫∑c nh·ªØng ƒëi·ªÅu b·∫°n mu·ªën th·∫£o
          lu·∫≠n.
        </Text>

        <TextInput
          style={styles.notesInput}
          placeholder="Nh·∫≠p ghi ch√∫ c·ªßa b·∫°n..."
          value={notes}
          onChangeText={setNotes}
          multiline
          numberOfLines={4}
          textAlignVertical="top"
        />
      </View>

      <View style={styles.importantNotice}>
        <Text style={styles.noticeTitle}>L∆∞u √Ω quan tr·ªçng</Text>
        <Text style={styles.noticeText}>
          ‚Ä¢ Vui l√≤ng ƒë·∫øn ƒë√∫ng gi·ªù h·∫πn{"\n"}‚Ä¢ N·∫øu c·∫ßn h·ªßy ho·∫∑c thay ƒë·ªïi l·ªãch h·∫πn,
          vui l√≤ng th√¥ng b√°o tr∆∞·ªõc √≠t nh·∫•t 2 gi·ªù{"\n"}‚Ä¢ Mang theo gi·∫•y t·ªù t√πy
          th√¢n khi ƒë·∫øn h·∫πn{"\n"}‚Ä¢ Cu·ªôc h·∫πn s·∫Ω di·ªÖn ra trong kho·∫£ng{" "}
          {Math.round(
            (new Date(slot.endTime) - new Date(slot.startTime)) / (1000 * 60)
          )}{" "}
          ph√∫t
        </Text>
      </View>

      <View style={styles.buttonContainer}>
        <TouchableOpacity
          style={styles.cancelButton}
          onPress={() => navigation.goBack()}
        >
          <Text style={styles.cancelButtonText}>Quay l·∫°i</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.confirmButton, loading && styles.disabledButton]}
          onPress={handleConfirmBooking}
          disabled={loading}
        >
          <Text style={styles.confirmButtonText}>
            {loading ? "ƒêang ƒë·∫∑t l·ªãch..." : "X√°c nh·∫≠n ƒë·∫∑t l·ªãch"}
          </Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.BACKGROUND,
    padding: SPACING.MD,
  },
  title: {
    fontSize: FONT_SIZES.HEADING,
    fontWeight: "bold",
    color: COLORS.TEXT_PRIMARY,
    marginBottom: SPACING.LG,
    textAlign: "center",
  },
  appointmentCard: {
    backgroundColor: COLORS.WHITE,
    padding: SPACING.MD,
    borderRadius: 8,
    marginBottom: SPACING.MD,
    elevation: 2,
    shadowColor: COLORS.BLACK,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  cardTitle: {
    fontSize: FONT_SIZES.LG,
    fontWeight: "bold",
    color: COLORS.TEXT_PRIMARY,
    marginBottom: SPACING.MD,
  },
  infoRow: {
    flexDirection: "row",
    marginBottom: SPACING.SM,
  },
  label: {
    fontSize: FONT_SIZES.MD,
    color: COLORS.TEXT_SECONDARY,
    fontWeight: "500",
    width: 100,
  },
  value: {
    fontSize: FONT_SIZES.MD,
    color: COLORS.TEXT_PRIMARY,
    flex: 1,
    fontWeight: "600",
  },
  todayNotice: {
    backgroundColor: COLORS.WARNING,
    padding: SPACING.SM,
    borderRadius: 4,
    marginTop: SPACING.SM,
  },
  todayText: {
    color: COLORS.WHITE,
    fontWeight: "bold",
    textAlign: "center",
  },
  notesCard: {
    backgroundColor: COLORS.WHITE,
    padding: SPACING.MD,
    borderRadius: 8,
    marginBottom: SPACING.MD,
    elevation: 2,
    shadowColor: COLORS.BLACK,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  notesDescription: {
    fontSize: FONT_SIZES.SM,
    color: COLORS.TEXT_SECONDARY,
    marginBottom: SPACING.SM,
    lineHeight: 18,
  },
  notesInput: {
    borderWidth: 1,
    borderColor: COLORS.GRAY_LIGHT,
    borderRadius: 8,
    padding: SPACING.SM,
    fontSize: FONT_SIZES.MD,
    color: COLORS.TEXT_PRIMARY,
    minHeight: 80,
  },
  importantNotice: {
    backgroundColor: COLORS.INFO,
    padding: SPACING.MD,
    borderRadius: 8,
    marginBottom: SPACING.LG,
  },
  noticeTitle: {
    fontSize: FONT_SIZES.MD,
    fontWeight: "bold",
    color: COLORS.WHITE,
    marginBottom: SPACING.SM,
  },
  noticeText: {
    fontSize: FONT_SIZES.SM,
    color: COLORS.WHITE,
    lineHeight: 20,
  },
  buttonContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: SPACING.LG,
  },
  cancelButton: {
    flex: 1,
    backgroundColor: COLORS.GRAY,
    paddingVertical: SPACING.MD,
    borderRadius: 8,
    marginRight: SPACING.SM,
    alignItems: "center",
  },
  cancelButtonText: {
    color: COLORS.WHITE,
    fontSize: FONT_SIZES.LG,
    fontWeight: "bold",
  },
  confirmButton: {
    flex: 1,
    backgroundColor: COLORS.PRIMARY,
    paddingVertical: SPACING.MD,
    borderRadius: 8,
    marginLeft: SPACING.SM,
    alignItems: "center",
  },
  confirmButtonText: {
    color: COLORS.WHITE,
    fontSize: FONT_SIZES.LG,
    fontWeight: "bold",
  },
  disabledButton: {
    backgroundColor: COLORS.GRAY,
  },
});

export default AppointmentBookingScreen;
